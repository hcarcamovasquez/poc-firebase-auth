<html>
<head>
    <title>Login Page</title>

    <script src="https://www.gstatic.com/firebasejs/ui/4.8.0/firebase-ui-auth.js"></script>
    <link type="text/css" rel="stylesheet" href="https://www.gstatic.com/firebasejs/ui/4.8.0/firebase-ui-auth.css"/>


</head>
<body>

<script src="/__/firebase/8.6.1/firebase-app.js"></script>
<script src="/__/firebase/8.6.1/firebase-auth.js"></script>
<script src="/__/firebase/8.6.1/firebase-functions.js"></script>
<script src="/__/firebase/8.6.1/firebase-analytics.js"></script>
<script src="/__/firebase/init.js"></script>

<h1>Welcome to My Awesome App</h1>
<div id="firebaseui-auth-container"></div>
<div id="loader">Loading...</div>

<script>


    var ui = new firebaseui.auth.AuthUI(firebase.auth());
    var xhttp = new XMLHttpRequest();

    firebase.functions().useFunctionsEmulator('http://localhost:5001');
    firebase.auth().useEmulator("http://localhost:9099");

    firebase.auth().onAuthStateChanged(function(user) {
        if (user) {
            // User is signed in.
            console.log(user)
        }
    });

    /*    firebase.auth().onAuthStateChanged(function (user) {
           if (user) {
               console.log(user)
              const call = firebase.functions().httpsCallable('authContext');
               call({text: 'ok'})
                   .then((result) => {
                       // Read result of the Cloud Function.
                       var sanitizedMessage = result.data.text;

                       console.log(sanitizedMessage)
                   });
                // Show user signed in screen. Reset if user just signed in. (Single page app)
                //  ui.reset();
            } else {
                console.log('no user')
                // No user signed in, render sign-in UI.
                //ui.start(config);
            }
        });
*/

    var uiConfig = {
        callbacks: {
            signInSuccessWithAuthResult: function (authResult, redirectUrl) {
                // User successfully signed in.
                // Return type determines whether we continue the redirect automatically
                // or whether we leave that to developer to handle.
                return true;
            },
            uiShown: function () {
                // The widget is rendered.
                // Hide the loader.
                document.getElementById('loader').style.display = 'none';
            }
        },
        // Will use popup for IDP Providers sign-in flow instead of the default, redirect.
        signInFlow: 'popup',
        signInSuccessUrl: './index.html',
        signInOptions: [
            firebase.auth.EmailAuthProvider.PROVIDER_ID,
            //Leave the lines as is for the providers you want to offer your users.
            /* firebase.auth.GoogleAuthProvider.PROVIDER_ID,
             firebase.auth.FacebookAuthProvider.PROVIDER_ID,
             firebase.auth.TwitterAuthProvider.PROVIDER_ID,
             firebase.auth.GithubAuthProvider.PROVIDER_ID,
             firebase.auth.EmailAuthProvider.PROVIDER_ID,
             firebase.auth.PhoneAuthProvider.PROVIDER_ID

             */
        ],
        // Terms of service url.
        tosUrl: './callback.html',
        // Privacy policy url.
        privacyPolicyUrl: './callback.html'
    };

    // The start method will wait until the DOM is loaded.
    ui.start('#firebaseui-auth-container', uiConfig);
</script>

</body>
</html>

